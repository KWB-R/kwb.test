% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helpers.R
\name{loadArgs}
\alias{loadArgs}
\title{Load Function Arguments and Results From Files}
\usage{
loadArgs(functionName = NULL, data.dir = file.path(tempdir(), "test"))
}
\arguments{
\item{functionName}{Name of the function to load arguments and results for.
The name is used to create a search pattern for RData files in
\code{data.dir}.}

\item{data.dir}{Directory in which to look for RData files matching
\code{args_<functionName>_<hhmmss>_<no>.RData}. The default is the
subfolder \code{test} in \code{tempdir()}.}
}
\value{
list with as many items as there were files args_<functionName>_*
  in the directory given in \code{data.dir}. Each list element has two
  components: \code{args} containing the arguments that were given to
  the function and \code{result} containing what the function returned.
}
\description{
Read the function arguments and function results that were stored in RData
files (in objects \code{args} and \code{result}, respectively) by a previous
call of \code{\link{saveArgs}}.
}
\examples{

# Define a function that stores its arguments and result with saveArgs
double <- function(x) {
  result <- 2 * x
  saveArgs("double", args = list(x = x), result = result)
  result
}

# Set global variable TESTMODE to "activate" saveArgs() in double()
TESTMODE <- TRUE

# Call the function a couple of times
double(4)
double(-99)
double(1:10)

# Load what was stored behind the scenes
testdata <- loadArgs("double")

# "Deactivate" saveArgs() in double()
TESTMODE <- FALSE

# Rerun the function with the stored arguments
results <- lapply(testdata, function(x) do.call("double", x$args))

# Compare the new with the old results
identical(results, lapply(testdata, "[[", "result"))
}
\seealso{
\code{\link{saveArgs}}
}
